/*
 * Â© 2023 Snyk Limited
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export type Problem = {
    /** A URI reference that identifies the problem type.  This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type. */
    type: string;
    /** A short, human-readable summary of the problem type. This should not chance from occurrence to occurrence of the problem.*/
    title: string;
    /** A human-readable explanation specific to this occurrence of the problem. */
    detail: string;
    /** The HTTP status code generated by the origin server for this occurrence of the problem. */
    status: number;
    /** An internal code for the error that occurred. */
    errorCode: string;
    /** A URI that identifies the specific occurrence of the problem. */
    instance?: string;
    /** The level of this error */
    level?: string;
    /** Additional properties. */
    [x: string]: any;
};
export type ErrorMetadata = Pick<Problem, 'type' | 'title' | 'status' | 'errorCode' | 'level' | 'instance'>;
export declare enum ErrorFormats {
    JsonApi = 0,
    ProblemJson = 1
}
export interface ErrorFormat {
    headers(): Record<string, string>;
    body(): Problem | JsonApiErrors;
}
export declare class ProblemJson implements ErrorFormat {
    private readonly payload;
    constructor(payload: Problem);
    headers(): Record<string, string>;
    body(): Problem | JsonApiErrors;
}
export type JsonApiErrorSource = {
    pointer: string;
} | {
    parameter: string;
} | {
    header: string;
};
export type JsonApiErrorObject = {
    id?: string;
    links?: {
        about?: string;
    };
    status: string;
    code: string;
    title: string;
    detail: string;
    source?: JsonApiErrorSource;
    meta?: {
        [x: string]: any;
    };
};
export type JsonApiErrors = {
    jsonapi: {
        version: string;
    };
    errors: [JsonApiErrorObject];
};
export declare class JsonApi implements ErrorFormat {
    private readonly payload;
    constructor(payload: JsonApiErrors);
    headers(): Record<string, string>;
    body(): Problem | JsonApiErrors;
}
