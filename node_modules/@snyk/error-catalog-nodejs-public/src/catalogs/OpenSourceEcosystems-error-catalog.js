/*
 * Â© 2023 Snyk Limited
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnsupportedRequirementsFileError = exports.InvalidConfigurationError = exports.MissingSupportedFileError = exports.Base64DecodeError = exports.Base64EncodeError = exports.CouldNotParseJSONFileError = exports.NoDependencyUpdatesError = exports.NoValidPackageUpgradesError = exports.ChildProcessExecutionError = exports.NoResultsFromForkerProcessesError = exports.UnknownBlobEncodingOnGithubError = exports.BadNPMVersionError = exports.UnableToReplaceBrokerURLError = exports.CouldNotFindBrokerURLError = exports.CouldNotParseNPMRegistryURLError = exports.NoRepoFoundForTheNPMPackageError = exports.TimeoutWhenProcessingTheDepTreeError = exports.SourceNotSupportedError = exports.NoReleasedVersionForVersionsRangeError = exports.CannotCreateGitHostError = exports.CannotGetBuildFileFromRepoError = exports.CannotResolveTargetPomFromRepoError = exports.CannotResolveTargetPomFromXmlError = exports.MissingProjectFromPomError = exports.PomFileNotFoundError = exports.SkippedGroupError = exports.InvalidCoordinatesError = exports.UnableToParseXMLError = exports.CyclicPropertyDetectedInPomFileError = exports.UnableToResolveVersionForPropertyError = exports.UnableToResolveValueForPropertyError = exports.MissingRequirementFromPomError = exports.UnsupportedExternalFileGenerationSCMError = exports.InconsistentVendoringError = exports.IncompleteProjectError = exports.SsoReAuthRequiredError = exports.GoModFileMissingError = exports.PrivateModuleError = exports.PublishFailedError = exports.MissingStaticMainFunctionError = exports.UnsupportedTargetFrameworkError = exports.UnsupportedManifestFileError = exports.MissingEnvironmentVariableError = exports.CannotGetFileFromSourceError = exports.UnprocessableFileError = exports.MissingPayloadError = exports.MissingHeaderError = exports.UnknownDependencyVersionError = exports.UnparseableLockFileError = exports.UnparseableManifestError = void 0;
exports.FailedToApplyDependencyUpdatesError = exports.TooManyManifestFilesError = void 0;
const problem_error_1 = require("../problem-error");
/**
 * @class
 * @name UnparseableManifestError
 * @description The provided manifest file could not be parsed as it has invalid syntax or does not match the expected schema. Review the manifest file, then try again.
 * @summary Unable to parse manifest file
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class UnparseableManifestError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Unable to parse manifest file',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-0001',
            status: 400,
            errorCode: 'SNYK-OS-0001',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.UnparseableManifestError = UnparseableManifestError;
/**
 * @class
 * @name UnparseableLockFileError
 * @description The provided lock file could not be parsed as it has invalid syntax or does not match the expected schema. Review the lock file, then try again.
 * @summary Unable to parse lock file
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class UnparseableLockFileError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Unable to parse lock file',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-0002',
            status: 400,
            errorCode: 'SNYK-OS-0002',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.UnparseableLockFileError = UnparseableLockFileError;
/**
 * @class
 * @name UnknownDependencyVersionError
 * @description Dependency version could not be resolved.
 *
 * See more:
 * - [https://support.snyk.io/hc/en-us/articles/360001373178-Could-not-determine-version-for-dependencies](https://support.snyk.io/hc/en-us/articles/360001373178-Could-not-determine-version-for-dependencies)
 * @summary Unknown dependency version
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class UnknownDependencyVersionError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Unknown dependency version',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-0003',
            status: 404,
            errorCode: 'SNYK-OS-0003',
            level: 'warn',
            instance,
        }, details, Object.assign({ links: [
                'https://support.snyk.io/hc/en-us/articles/360001373178-Could-not-determine-version-for-dependencies',
            ] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.UnknownDependencyVersionError = UnknownDependencyVersionError;
/**
 * @class
 * @name MissingHeaderError
 * @description The server encountered a request that is missing a mandatory request header.
 * @summary Missing required request header
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class MissingHeaderError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Missing required request header',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-0004',
            status: 422,
            errorCode: 'SNYK-OS-0004',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.MissingHeaderError = MissingHeaderError;
/**
 * @class
 * @name MissingPayloadError
 * @description The server could not process the request.
 * @summary Payload missing required elements
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class MissingPayloadError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Payload missing required elements',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-0005',
            status: 422,
            errorCode: 'SNYK-OS-0005',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.MissingPayloadError = MissingPayloadError;
/**
 * @class
 * @name UnprocessableFileError
 * @description The dependency service could not process the files.
 * @summary Files cannot be processed
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class UnprocessableFileError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Files cannot be processed',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-0006',
            status: 422,
            errorCode: 'SNYK-OS-0006',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.UnprocessableFileError = UnprocessableFileError;
/**
 * @class
 * @name CannotGetFileFromSourceError
 * @description Could not get the file from the source URL.
 * @summary Cannot get file from source
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class CannotGetFileFromSourceError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Cannot get file from source',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-0007',
            status: 500,
            errorCode: 'SNYK-OS-0007',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.CannotGetFileFromSourceError = CannotGetFileFromSourceError;
/**
 * @class
 * @name MissingEnvironmentVariableError
 * @description The server encountered a critical operation that requires a specific environment variable, but the variable is not set or is not accessible within the current environment.
 * @summary Missing environment variable
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class MissingEnvironmentVariableError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Missing environment variable',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-0008',
            status: 500,
            errorCode: 'SNYK-OS-0008',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.MissingEnvironmentVariableError = MissingEnvironmentVariableError;
/**
 * @class
 * @name UnsupportedManifestFileError
 * @description The provided manifest file is not supported by Snyk for .NET.
 *
 * See more:
 * - [https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/.net](https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/.net)
 * @summary Unsupported manifest file type for remediation
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class UnsupportedManifestFileError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Unsupported manifest file type for remediation',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-dotnet-0001',
            status: 400,
            errorCode: 'SNYK-OS-DOTNET-0001',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [
                'https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/.net',
            ] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.UnsupportedManifestFileError = UnsupportedManifestFileError;
/**
 * @class
 * @name UnsupportedTargetFrameworkError
 * @description The provided manifest file defines a `<TargetFramework>` or `<TargetFrameworks>` that is not currently supported by Snyk's .NET scanning solution.
 * @summary Target framework not supported
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class UnsupportedTargetFrameworkError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Target framework not supported',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-dotnet-0002',
            status: 422,
            errorCode: 'SNYK-OS-DOTNET-0002',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.UnsupportedTargetFrameworkError = UnsupportedTargetFrameworkError;
/**
 * @class
 * @name MissingStaticMainFunctionError
 * @description This error occurs when no static Main method with a correct signature is found in the code that produces an executable file.
 * It also occurs if the entry point function, `Main`, is defined with the wrong case, such as lower-case main.
 *
 * In order to fix this issue, ensure that your program has a .cs file that contains a main function, such as
 * ```c#
 * namespace Example
 * {
 *     class Program
 *     {
 *         static void Main(string[] args)
 *         {
 *             Console.WriteLine("hello world");
 *         }
 *     }
 * }
 * ```
 *
 * See more:
 * - [https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs5001](https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs5001)
 * @summary Your C# code is missing a static Main function
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class MissingStaticMainFunctionError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Your C# code is missing a static Main function',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-dotnet-0003',
            status: 422,
            errorCode: 'SNYK-OS-DOTNET-0003',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [
                'https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs5001',
            ] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.MissingStaticMainFunctionError = MissingStaticMainFunctionError;
/**
 * @class
 * @name PublishFailedError
 * @description This error occurs when running `dotnet publish --sc --framework <your-target-framework>` fails to generate a
 * self-contained binary. Snyk needs to run this command in order to adequately determine the dependency tree for your project. If this command fails, Snyk cannot continue.
 *
 * Steps to determine why this happened:
 *
 * * Checkout a clean version of your project in a temporary folder
 * * Run `dotnet publish --sc --framework <your-target-framework> ` on your project, and confirm this step fails.
 *
 * If this step is successful locally, it is possible that Snyk is running another version of the .NET SDK. To tell Snyk which version of the .NET SDK to use, consider using the [global.json](https://learn.microsoft.com/en-us/dotnet/core/tools/global-json) solution provided by Microsoft.
 *
 * See more:
 * - [https://learn.microsoft.com/en-us/dotnet/core/tools/sdk-errors/](https://learn.microsoft.com/en-us/dotnet/core/tools/sdk-errors/)
 * - [https://learn.microsoft.com/en-us/dotnet/core/tools/global-json](https://learn.microsoft.com/en-us/dotnet/core/tools/global-json)
 * - [https://github.com/snyk/snyk-nuget-plugin/blob/885486aa656c28d3db465c8d22710770d5cc6773/lib/nuget-parser/cli/dotnet.ts#L67](https://github.com/snyk/snyk-nuget-plugin/blob/885486aa656c28d3db465c8d22710770d5cc6773/lib/nuget-parser/cli/dotnet.ts#L67)
 * @summary The dotnet CLI is unable to generate a self-contained binary
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class PublishFailedError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'The dotnet CLI is unable to generate a self-contained binary',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-dotnet-0004',
            status: 422,
            errorCode: 'SNYK-OS-DOTNET-0004',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [
                'https://learn.microsoft.com/en-us/dotnet/core/tools/sdk-errors/',
                'https://learn.microsoft.com/en-us/dotnet/core/tools/global-json',
                'https://github.com/snyk/snyk-nuget-plugin/blob/885486aa656c28d3db465c8d22710770d5cc6773/lib/nuget-parser/cli/dotnet.ts#L67',
            ] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.PublishFailedError = PublishFailedError;
/**
 * @class
 * @name PrivateModuleError
 * @description Snyk could not access the private modules within your go.mod files.
 *
 * See more:
 * - [https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/go](https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/go)
 * @summary Failed to access private module
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class PrivateModuleError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Failed to access private module',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-go-0001',
            status: 400,
            errorCode: 'SNYK-OS-GO-0001',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [
                'https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/go',
            ] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.PrivateModuleError = PrivateModuleError;
/**
 * @class
 * @name GoModFileMissingError
 * @description A go.mod file was not found in the current directory or any parent directory.
 *
 * See more:
 * - [https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/go](https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/go)
 * @summary Go mod file not found
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class GoModFileMissingError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Go mod file not found',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-go-0002',
            status: 400,
            errorCode: 'SNYK-OS-GO-0002',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [
                'https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/go',
            ] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.GoModFileMissingError = GoModFileMissingError;
/**
 * @class
 * @name SsoReAuthRequiredError
 * @description Your code is cloned on an isolated environment using Git as it is required by Snyk to analyze its dependencies.
 *
 * Your Organization has enabled or enforced SAML SSO after you authorized Snyk to access your code, and a re-authentication is therefore required.
 *
 * The error you're seeing is usually reproducible by attempting to do a `git clone` of your repository with incorrectly configured credentials.
 * Verify your authentication configuration with your Git cloud provider and try again.
 *
 * See more:
 * - [https://docs.github.com/en/enterprise-cloud@latest/authentication/authenticating-with-saml-single-sign-on/about-authentication-with-saml-single-sign-on#about-oauth-apps-github-apps-and-saml-sso](https://docs.github.com/en/enterprise-cloud@latest/authentication/authenticating-with-saml-single-sign-on/about-authentication-with-saml-single-sign-on#about-oauth-apps-github-apps-and-saml-sso)
 * @summary OAuth re-authorization required
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class SsoReAuthRequiredError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'OAuth re-authorization required',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-go-0003',
            status: 422,
            errorCode: 'SNYK-OS-GO-0003',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [
                'https://docs.github.com/en/enterprise-cloud@latest/authentication/authenticating-with-saml-single-sign-on/about-authentication-with-saml-single-sign-on#about-oauth-apps-github-apps-and-saml-sso',
            ] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.SsoReAuthRequiredError = SsoReAuthRequiredError;
/**
 * @class
 * @name IncompleteProjectError
 * @description Generating the dependency graph requires Snyk to run go list `go list -deps -json` inside the project. If the operation fails, creating a full dependency graph cannot continue.
 *
 * This error means that you need some cleanup, such as `go mod tidy`) or your project deployment process contains a code generation step such as `protobuf` or similar that is not currently supported by Snyk.
 *
 * To verify if this is the case, clone your project in a clean environment, run go list `go list -deps -json` and verify whether the operation fails.
 *
 * If Snyk cannot process your code successfully, insert the Snyk CLI as part of your deployment pipeline.
 *
 * See more:
 * - [https://docs.snyk.io/snyk-cli](https://docs.snyk.io/snyk-cli)
 * - [https://github.com/snyk/snyk-go-plugin](https://github.com/snyk/snyk-go-plugin)
 * - [https://github.com/golang/go/blob/master/src/cmd/go/internal/list/list.go](https://github.com/golang/go/blob/master/src/cmd/go/internal/list/list.go)
 * @summary Your project repository is missing required files
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class IncompleteProjectError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Your project repository is missing required files',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-go-0004',
            status: 422,
            errorCode: 'SNYK-OS-GO-0004',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [
                'https://docs.snyk.io/snyk-cli',
                'https://github.com/snyk/snyk-go-plugin',
                'https://github.com/golang/go/blob/master/src/cmd/go/internal/list/list.go',
            ] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.IncompleteProjectError = IncompleteProjectError;
/**
 * @class
 * @name InconsistentVendoringError
 * @description Generating the dependency graph requires Snyk to run `go list -deps -json` inside the project. If the operation fails, creating a full dependency graph cannot continue.
 *
 * This error means that there is inconsistency between your `vendor/modules.txt` file and your `go.mod` file. To remediate, you need to:
 *
 * * `go mod vendor`
 * * `go mod tidy`
 *
 * Next, commit those changes to your repo. Snyk does not manipulate with your code on our end by design, which is why this is not done automatically.
 *
 * To verify if this is the case, clone your project in a clean environment, run go list `go list -deps -json` and verify whether the operation fails.
 * Then try and run the above mentioned commands and see if your SCM system reports changes in files.
 *
 * See more:
 * - [https://go.dev/ref/mod#go-mod-vendor](https://go.dev/ref/mod#go-mod-vendor)
 * @summary Your project repository has inconsistent vendoring information
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class InconsistentVendoringError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Your project repository has inconsistent vendoring information',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-go-0005',
            status: 422,
            errorCode: 'SNYK-OS-GO-0005',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [
                'https://go.dev/ref/mod#go-mod-vendor',
            ] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.InconsistentVendoringError = InconsistentVendoringError;
/**
 * @class
 * @name UnsupportedExternalFileGenerationSCMError
 * @description Snyk currently does not support external file generation in your project. This limitation is due to Snyk's lack of visibility into the third-party generator tools you may be using and the specific commands required to generate these files.
 *
 * Snyk can only work with the files available in your repository and does not have insight into the generation process for external files.
 * @summary Unsupported external file generation
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class UnsupportedExternalFileGenerationSCMError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Unsupported external file generation',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-go-0006',
            status: 422,
            errorCode: 'SNYK-OS-GO-0006',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.UnsupportedExternalFileGenerationSCMError = UnsupportedExternalFileGenerationSCMError;
/**
 * @class
 * @name MissingRequirementFromPomError
 * @description The required property is missing from the pom object.
 * @summary Missing property
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class MissingRequirementFromPomError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Missing property',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-maven-0001',
            status: 422,
            errorCode: 'SNYK-OS-MAVEN-0001',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.MissingRequirementFromPomError = MissingRequirementFromPomError;
/**
 * @class
 * @name UnableToResolveValueForPropertyError
 * @description The targeted property could not be resolved with a valid value.
 * @summary Unable to resolve value for property
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class UnableToResolveValueForPropertyError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Unable to resolve value for property',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-maven-0002',
            status: 422,
            errorCode: 'SNYK-OS-MAVEN-0002',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.UnableToResolveValueForPropertyError = UnableToResolveValueForPropertyError;
/**
 * @class
 * @name UnableToResolveVersionForPropertyError
 * @description The targeted property could not be resolved with a valid version.
 * @summary Unable to resolve version for property
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class UnableToResolveVersionForPropertyError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Unable to resolve version for property',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-maven-0003',
            status: 422,
            errorCode: 'SNYK-OS-MAVEN-0003',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.UnableToResolveVersionForPropertyError = UnableToResolveVersionForPropertyError;
/**
 * @class
 * @name CyclicPropertyDetectedInPomFileError
 * @description There is circular dependency among properties in the Maven project's configuration file (POM), preventing proper resolution and causing an error.
 * @summary Cyclic property detected in POM file
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class CyclicPropertyDetectedInPomFileError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Cyclic property detected in POM file',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-maven-0004',
            status: 422,
            errorCode: 'SNYK-OS-MAVEN-0004',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.CyclicPropertyDetectedInPomFileError = CyclicPropertyDetectedInPomFileError;
/**
 * @class
 * @name UnableToParseXMLError
 * @description There is an error parsing the XML file. This could be referring to either pom.xml or maven-metadata.xml.
 * @summary Error parsing the XML file
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class UnableToParseXMLError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Error parsing the XML file',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-maven-0005',
            status: 500,
            errorCode: 'SNYK-OS-MAVEN-0005',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.UnableToParseXMLError = UnableToParseXMLError;
/**
 * @class
 * @name InvalidCoordinatesError
 * @description The coordinates provided for a project were invalid.
 * @summary Invalid coordinates provided
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class InvalidCoordinatesError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Invalid coordinates provided',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-maven-0006',
            status: 422,
            errorCode: 'SNYK-OS-MAVEN-0006',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.InvalidCoordinatesError = InvalidCoordinatesError;
/**
 * @class
 * @name SkippedGroupError
 * @description Skipping a specific groupId starting due to remapped coordinates.
 * @summary Skipping group
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class SkippedGroupError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Skipping group',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-maven-0007',
            status: 422,
            errorCode: 'SNYK-OS-MAVEN-0007',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.SkippedGroupError = SkippedGroupError;
/**
 * @class
 * @name PomFileNotFoundError
 * @description The pom file was not found in Maven repository.
 * @summary Pom file not found
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class PomFileNotFoundError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Pom file not found',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-maven-0008',
            status: 422,
            errorCode: 'SNYK-OS-MAVEN-0008',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.PomFileNotFoundError = PomFileNotFoundError;
/**
 * @class
 * @name MissingProjectFromPomError
 * @description A project element is missing from POM.
 * @summary Missing project from POM
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class MissingProjectFromPomError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Missing project from POM',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-maven-0009',
            status: 422,
            errorCode: 'SNYK-OS-MAVEN-0009',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.MissingProjectFromPomError = MissingProjectFromPomError;
/**
 * @class
 * @name CannotResolveTargetPomFromXmlError
 * @description Cannot resolve the targeted POM from the input XML.
 * @summary Cannot resolve the target POM from the input XML
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class CannotResolveTargetPomFromXmlError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Cannot resolve the target POM from the input XML',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-maven-0010',
            status: 422,
            errorCode: 'SNYK-OS-MAVEN-0010',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.CannotResolveTargetPomFromXmlError = CannotResolveTargetPomFromXmlError;
/**
 * @class
 * @name CannotResolveTargetPomFromRepoError
 * @description Cannot resolve the targeted POM from the repository.
 * @summary Cannot resolve the target POM from the repository
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class CannotResolveTargetPomFromRepoError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Cannot resolve the target POM from the repository',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-maven-0011',
            status: 404,
            errorCode: 'SNYK-OS-MAVEN-0011',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.CannotResolveTargetPomFromRepoError = CannotResolveTargetPomFromRepoError;
/**
 * @class
 * @name CannotGetBuildFileFromRepoError
 * @description Cannot get the build file repository.
 * @summary Cannot get the build file repository
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class CannotGetBuildFileFromRepoError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Cannot get the build file repository',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-maven-0012',
            status: 404,
            errorCode: 'SNYK-OS-MAVEN-0012',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.CannotGetBuildFileFromRepoError = CannotGetBuildFileFromRepoError;
/**
 * @class
 * @name CannotCreateGitHostError
 * @description Cannot create source URL.
 * @summary Unable to create hosted git info
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class CannotCreateGitHostError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Unable to create hosted git info',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-maven-0013',
            status: 500,
            errorCode: 'SNYK-OS-MAVEN-0013',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.CannotCreateGitHostError = CannotCreateGitHostError;
/**
 * @class
 * @name NoReleasedVersionForVersionsRangeError
 * @description There was no version released for the specified versions range.
 * @summary No released version for versions range
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class NoReleasedVersionForVersionsRangeError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'No released version for versions range',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-maven-0014',
            status: 422,
            errorCode: 'SNYK-OS-MAVEN-0014',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.NoReleasedVersionForVersionsRangeError = NoReleasedVersionForVersionsRangeError;
/**
 * @class
 * @name SourceNotSupportedError
 * @description The source used is not supported by fetcher. The supported sources are: github, bitbucket, gitlab.
 * @summary Source is not supported
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class SourceNotSupportedError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Source is not supported',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-maven-0015',
            status: 422,
            errorCode: 'SNYK-OS-MAVEN-0015',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.SourceNotSupportedError = SourceNotSupportedError;
/**
 * @class
 * @name TimeoutWhenProcessingTheDepTreeError
 * @description There was an timeout when processing the dependecy tree.
 * @summary Timeout when processing the dependency tree
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class TimeoutWhenProcessingTheDepTreeError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Timeout when processing the dependency tree',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-maven-0016',
            status: 422,
            errorCode: 'SNYK-OS-MAVEN-0016',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.TimeoutWhenProcessingTheDepTreeError = TimeoutWhenProcessingTheDepTreeError;
/**
 * @class
 * @name NoRepoFoundForTheNPMPackageError
 * @description No repository found for the NPM package.
 * @summary No repository found for A NPM package
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class NoRepoFoundForTheNPMPackageError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'No repository found for A NPM package',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-nodejs-0001',
            status: 422,
            errorCode: 'SNYK-OS-NODEJS-0001',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.NoRepoFoundForTheNPMPackageError = NoRepoFoundForTheNPMPackageError;
/**
 * @class
 * @name CouldNotParseNPMRegistryURLError
 * @description Could not parse NPM registry URL.
 * @summary Could not parse NPM registry URL
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class CouldNotParseNPMRegistryURLError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Could not parse NPM registry URL',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-nodejs-0002',
            status: 422,
            errorCode: 'SNYK-OS-NODEJS-0002',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.CouldNotParseNPMRegistryURLError = CouldNotParseNPMRegistryURLError;
/**
 * @class
 * @name CouldNotFindBrokerURLError
 * @description Could not find a broker resolved URL.
 * @summary Could not find a broker resolved URL
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class CouldNotFindBrokerURLError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Could not find a broker resolved URL',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-nodejs-0003',
            status: 422,
            errorCode: 'SNYK-OS-NODEJS-0003',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.CouldNotFindBrokerURLError = CouldNotFindBrokerURLError;
/**
 * @class
 * @name UnableToReplaceBrokerURLError
 * @description Unable to replace all broker urls in lock file.
 * @summary Unable to replace broker URL
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class UnableToReplaceBrokerURLError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Unable to replace broker URL',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-nodejs-0004',
            status: 422,
            errorCode: 'SNYK-OS-NODEJS-0004',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.UnableToReplaceBrokerURLError = UnableToReplaceBrokerURLError;
/**
 * @class
 * @name BadNPMVersionError
 * @description The NPM version is not supported.
 * @summary Bad NPM version
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class BadNPMVersionError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Bad NPM version',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-nodejs-0005',
            status: 422,
            errorCode: 'SNYK-OS-NODEJS-0005',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.BadNPMVersionError = BadNPMVersionError;
/**
 * @class
 * @name UnknownBlobEncodingOnGithubError
 * @description Unknown blob encoding on Github.
 * @summary Unknown blob encoding on Github
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class UnknownBlobEncodingOnGithubError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Unknown blob encoding on Github',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-nodejs-0006',
            status: 422,
            errorCode: 'SNYK-OS-NODEJS-0006',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.UnknownBlobEncodingOnGithubError = UnknownBlobEncodingOnGithubError;
/**
 * @class
 * @name NoResultsFromForkerProcessesError
 * @description No result from forked process.
 * @summary No result from forked process
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class NoResultsFromForkerProcessesError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'No result from forked process',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-nodejs-0007',
            status: 500,
            errorCode: 'SNYK-OS-NODEJS-0007',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.NoResultsFromForkerProcessesError = NoResultsFromForkerProcessesError;
/**
 * @class
 * @name ChildProcessExecutionError
 * @description The child process encountered an error during execution.
 * @summary Child Process Execution Error
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class ChildProcessExecutionError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Child Process Execution Error',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-nodejs-0008',
            status: 500,
            errorCode: 'SNYK-OS-NODEJS-0008',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.ChildProcessExecutionError = ChildProcessExecutionError;
/**
 * @class
 * @name NoValidPackageUpgradesError
 * @description The system attempted to find valid upgrades for the packages specified in the lock file, but none were available.
 * @summary No valid package upgrades
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class NoValidPackageUpgradesError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'No valid package upgrades',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-nodejs-0009',
            status: 422,
            errorCode: 'SNYK-OS-NODEJS-0009',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.NoValidPackageUpgradesError = NoValidPackageUpgradesError;
/**
 * @class
 * @name NoDependencyUpdatesError
 * @description There are no available updates for the dependencies.
 * @summary No dependency updates
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class NoDependencyUpdatesError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'No dependency updates',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-nodejs-0010',
            status: 422,
            errorCode: 'SNYK-OS-NODEJS-0010',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.NoDependencyUpdatesError = NoDependencyUpdatesError;
/**
 * @class
 * @name CouldNotParseJSONFileError
 * @description An error occurred while attempting to parse a JSON file.
 * @summary Could not parse JSON file
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class CouldNotParseJSONFileError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Could not parse JSON file',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-nodejs-0011',
            status: 422,
            errorCode: 'SNYK-OS-NODEJS-0011',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.CouldNotParseJSONFileError = CouldNotParseJSONFileError;
/**
 * @class
 * @name Base64EncodeError
 * @description An error occurred while attempting to perform Base64 encoding.
 * @summary Could not Base64 encode
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class Base64EncodeError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Could not Base64 encode',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-nodejs-0012',
            status: 422,
            errorCode: 'SNYK-OS-NODEJS-0012',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.Base64EncodeError = Base64EncodeError;
/**
 * @class
 * @name Base64DecodeError
 * @description An error occurred while attempting to perform Base64 decoding.
 * @summary Could not Base64 decode
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class Base64DecodeError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Could not Base64 decode',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-nodejs-0013',
            status: 422,
            errorCode: 'SNYK-OS-NODEJS-0013',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.Base64DecodeError = Base64DecodeError;
/**
 * @class
 * @name MissingSupportedFileError
 * @description Could not find supported file.
 * @summary Missing supported file
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class MissingSupportedFileError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Missing supported file',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-nodejs-0014',
            status: 400,
            errorCode: 'SNYK-OS-NODEJS-0014',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.MissingSupportedFileError = MissingSupportedFileError;
/**
 * @class
 * @name InvalidConfigurationError
 * @description The configuration parameter does not meet the expected data type. Please ensure the provided value is of the correct data type.
 * @summary Invalid configuration
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class InvalidConfigurationError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Invalid configuration',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-nodejs-0015',
            status: 400,
            errorCode: 'SNYK-OS-NODEJS-0015',
            level: 'warn',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.InvalidConfigurationError = InvalidConfigurationError;
/**
 * @class
 * @name UnsupportedRequirementsFileError
 * @description The provided requirements file is not supported by Snyk for Python.
 *
 * See more:
 * - [https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/python](https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/python)
 * @summary Unsupported manifest file type for remediation
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class UnsupportedRequirementsFileError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Unsupported manifest file type for remediation',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-pip-0001',
            status: 422,
            errorCode: 'SNYK-OS-PIP-0001',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [
                'https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/python',
            ] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.UnsupportedRequirementsFileError = UnsupportedRequirementsFileError;
/**
 * @class
 * @name TooManyManifestFilesError
 * @description Too many manifest files were provided in the request body.
 * @summary Received more manifests than expected
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class TooManyManifestFilesError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Received more manifests than expected',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-pip-0002',
            status: 422,
            errorCode: 'SNYK-OS-PIP-0002',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.TooManyManifestFilesError = TooManyManifestFilesError;
/**
 * @class
 * @name FailedToApplyDependencyUpdatesError
 * @description An error occured while updating dependencies.
 * @summary Failed to apply dependency updates
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class FailedToApplyDependencyUpdatesError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Failed to apply dependency updates',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-os-pip-0003',
            status: 422,
            errorCode: 'SNYK-OS-PIP-0003',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.FailedToApplyDependencyUpdatesError = FailedToApplyDependencyUpdatesError;
//# sourceMappingURL=OpenSourceEcosystems-error-catalog.js.map