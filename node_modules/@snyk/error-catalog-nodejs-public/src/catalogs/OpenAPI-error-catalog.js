/*
 * Â© 2023 Snyk Limited
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnsupportedMediaTypeError = exports.UnauthorizedError = exports.RequestEntityTooLargeError = exports.MethodNotAllowedError = exports.NotFoundError = exports.NotAcceptableError = exports.ForbiddenError = exports.BadRequestError = void 0;
const problem_error_1 = require("../problem-error");
/**
 * @class
 * @name BadRequestError
 * @description The server cannot process the request due to invalid or corrupt data. Review the request, then try again.
 *
 * See more:
 * - [https://docs.snyk.io/snyk-api-info/getting-started-using-snyk-rest-api ](https://docs.snyk.io/snyk-api-info/getting-started-using-snyk-rest-api )
 * @summary Bad request
 * @category OpenAPI
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class BadRequestError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Bad request',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-openapi-0001',
            status: 400,
            errorCode: 'SNYK-OPENAPI-0001',
            level: 'warn',
            instance,
        }, details, Object.assign({ links: [
                'https://docs.snyk.io/snyk-api-info/getting-started-using-snyk-rest-api ',
            ] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.BadRequestError = BadRequestError;
/**
 * @class
 * @name ForbiddenError
 * @description Access to the requested resource is forbidden.
 * @summary Forbidden
 * @category OpenAPI
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class ForbiddenError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Forbidden',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-openapi-0002',
            status: 403,
            errorCode: 'SNYK-OPENAPI-0002',
            level: 'warn',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.ForbiddenError = ForbiddenError;
/**
 * @class
 * @name NotAcceptableError
 * @description The server cannot provide a response that matches the provided accept headers. Review the request, then try again.
 * @summary Not acceptable
 * @category OpenAPI
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class NotAcceptableError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Not acceptable',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-openapi-0003',
            status: 406,
            errorCode: 'SNYK-OPENAPI-0003',
            level: 'warn',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.NotAcceptableError = NotAcceptableError;
/**
 * @class
 * @name NotFoundError
 * @description The server cannot find the requested resource.
 * @summary Not found
 * @category OpenAPI
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class NotFoundError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Not found',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-openapi-0004',
            status: 404,
            errorCode: 'SNYK-OPENAPI-0004',
            level: 'warn',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.NotFoundError = NotFoundError;
/**
 * @class
 * @name MethodNotAllowedError
 * @description The target endpoint does not support your request method. Review the request, then try again.
 * @summary Method not allowed
 * @category OpenAPI
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class MethodNotAllowedError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Method not allowed',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-openapi-0005',
            status: 405,
            errorCode: 'SNYK-OPENAPI-0005',
            level: 'warn',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.MethodNotAllowedError = MethodNotAllowedError;
/**
 * @class
 * @name RequestEntityTooLargeError
 * @description The request entity exceeds server limitations.
 * @summary Request entity too large
 * @category OpenAPI
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class RequestEntityTooLargeError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Request entity too large',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-openapi-0006',
            status: 413,
            errorCode: 'SNYK-OPENAPI-0006',
            level: 'warn',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.RequestEntityTooLargeError = RequestEntityTooLargeError;
/**
 * @class
 * @name UnauthorizedError
 * @description The request lacks authentication credentials for the requested resource.
 *
 * See more:
 * - [https://docs.snyk.io/snyk-api-info/authentication-for-api ](https://docs.snyk.io/snyk-api-info/authentication-for-api )
 * @summary Unauthorized
 * @category OpenAPI
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class UnauthorizedError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Unauthorized',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-openapi-0007',
            status: 401,
            errorCode: 'SNYK-OPENAPI-0007',
            level: 'warn',
            instance,
        }, details, Object.assign({ links: [
                'https://docs.snyk.io/snyk-api-info/authentication-for-api ',
            ] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.UnauthorizedError = UnauthorizedError;
/**
 * @class
 * @name UnsupportedMediaTypeError
 * @description The media format of the request is not supported.
 * @summary Unsupported media type
 * @category OpenAPI
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class UnsupportedMediaTypeError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Unsupported media type',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-openapi-0008',
            status: 415,
            errorCode: 'SNYK-OPENAPI-0008',
            level: 'warn',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.UnsupportedMediaTypeError = UnsupportedMediaTypeError;
//# sourceMappingURL=OpenAPI-error-catalog.js.map