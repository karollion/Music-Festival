/*
 * Â© 2023 Snyk Limited
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalServerError = exports.StorageFailureError = exports.DataTransformationError = exports.InvalidResponseError = exports.InvalidRequestError = void 0;
const problem_error_1 = require("../problem-error");
/**
 * @class
 * @name InvalidRequestError
 * @description Check the body of your request and try again.
 * @summary Invalid request
 * @category OpenSourceProjectIssues
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class InvalidRequestError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Invalid request',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-ossi-ospi-1001',
            status: 400,
            errorCode: 'SNYK-OSSI-OSPI-1001',
            level: 'warn',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.InvalidRequestError = InvalidRequestError;
/**
 * @class
 * @name InvalidResponseError
 * @description This issue is unexpected, and the service will recover shortly. If the error still occurs, contact support.
 * @summary Unable to return valid API response
 * @category OpenSourceProjectIssues
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class InvalidResponseError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Unable to return valid API response',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-ossi-ospi-1002',
            status: 500,
            errorCode: 'SNYK-OSSI-OSPI-1002',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.InvalidResponseError = InvalidResponseError;
/**
 * @class
 * @name DataTransformationError
 * @description This issue is unexpected, and the service will recover shortly. If the error still occurs, contact support.
 * @summary Failed to process data
 * @category OpenSourceProjectIssues
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class DataTransformationError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Failed to process data',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-ossi-ospi-2001',
            status: 500,
            errorCode: 'SNYK-OSSI-OSPI-2001',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.DataTransformationError = DataTransformationError;
/**
 * @class
 * @name StorageFailureError
 * @description Check inputs and then try again. If the error still occurs, contact support.
 * @summary Failed to store issue data
 * @category OpenSourceProjectIssues
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class StorageFailureError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Failed to store issue data',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-ossi-ospi-3001',
            status: 500,
            errorCode: 'SNYK-OSSI-OSPI-3001',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.StorageFailureError = StorageFailureError;
/**
 * @class
 * @name InternalServerError
 * @description This issue is unexpected, and the service will recover shortly. If the error still occurs, contact support.
 * @summary Internal server error
 * @category OpenSourceProjectIssues
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
class InternalServerError extends problem_error_1.ProblemError {
    constructor(details, additionalData, cause, instance) {
        super({
            title: 'Internal server error',
            type: 'https://docs.snyk.io/more-info/error-catalog#snyk-ossi-ospi-4001',
            status: 500,
            errorCode: 'SNYK-OSSI-OSPI-4001',
            level: 'error',
            instance,
        }, details, Object.assign({ links: [] }, additionalData), cause);
        this.name = this.constructor.name;
    }
}
exports.InternalServerError = InternalServerError;
//# sourceMappingURL=OpenSourceProjectIssues-error-catalog.js.map