/*
 * Â© 2023 Snyk Limited
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ProblemError } from '../problem-error';
/**
 * @class
 * @name UnparseableManifestError
 * @description The provided manifest file could not be parsed as it has invalid syntax or does not match the expected schema. Review the manifest file, then try again.
 * @summary Unable to parse manifest file
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnparseableManifestError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnparseableLockFileError
 * @description The provided lock file could not be parsed as it has invalid syntax or does not match the expected schema. Review the lock file, then try again.
 * @summary Unable to parse lock file
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnparseableLockFileError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnknownDependencyVersionError
 * @description Dependency version could not be resolved.
 *
 * See more:
 * - [https://support.snyk.io/hc/en-us/articles/360001373178-Could-not-determine-version-for-dependencies](https://support.snyk.io/hc/en-us/articles/360001373178-Could-not-determine-version-for-dependencies)
 * @summary Unknown dependency version
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnknownDependencyVersionError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name MissingHeaderError
 * @description The server encountered a request that is missing a mandatory request header.
 * @summary Missing required request header
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class MissingHeaderError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name MissingPayloadError
 * @description The server could not process the request.
 * @summary Payload missing required elements
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class MissingPayloadError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnprocessableFileError
 * @description The dependency service could not process the files.
 * @summary Files cannot be processed
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnprocessableFileError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name CannotGetFileFromSourceError
 * @description Could not get the file from the source URL.
 * @summary Cannot get file from source
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class CannotGetFileFromSourceError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name MissingEnvironmentVariableError
 * @description The server encountered a critical operation that requires a specific environment variable, but the variable is not set or is not accessible within the current environment.
 * @summary Missing environment variable
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class MissingEnvironmentVariableError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnsupportedManifestFileError
 * @description The provided manifest file is not supported by Snyk for .NET.
 *
 * See more:
 * - [https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/.net](https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/.net)
 * @summary Unsupported manifest file type for remediation
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnsupportedManifestFileError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnsupportedTargetFrameworkError
 * @description The provided manifest file defines a `<TargetFramework>` or `<TargetFrameworks>` that is not currently supported by Snyk's .NET scanning solution.
 * @summary Target framework not supported
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnsupportedTargetFrameworkError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name MissingStaticMainFunctionError
 * @description This error occurs when no static Main method with a correct signature is found in the code that produces an executable file.
 * It also occurs if the entry point function, `Main`, is defined with the wrong case, such as lower-case main.
 *
 * In order to fix this issue, ensure that your program has a .cs file that contains a main function, such as
 * ```c#
 * namespace Example
 * {
 *     class Program
 *     {
 *         static void Main(string[] args)
 *         {
 *             Console.WriteLine("hello world");
 *         }
 *     }
 * }
 * ```
 *
 * See more:
 * - [https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs5001](https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs5001)
 * @summary Your C# code is missing a static Main function
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class MissingStaticMainFunctionError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name PublishFailedError
 * @description This error occurs when running `dotnet publish --sc --framework <your-target-framework>` fails to generate a
 * self-contained binary. Snyk needs to run this command in order to adequately determine the dependency tree for your project. If this command fails, Snyk cannot continue.
 *
 * Steps to determine why this happened:
 *
 * * Checkout a clean version of your project in a temporary folder
 * * Run `dotnet publish --sc --framework <your-target-framework> ` on your project, and confirm this step fails.
 *
 * If this step is successful locally, it is possible that Snyk is running another version of the .NET SDK. To tell Snyk which version of the .NET SDK to use, consider using the [global.json](https://learn.microsoft.com/en-us/dotnet/core/tools/global-json) solution provided by Microsoft.
 *
 * See more:
 * - [https://learn.microsoft.com/en-us/dotnet/core/tools/sdk-errors/](https://learn.microsoft.com/en-us/dotnet/core/tools/sdk-errors/)
 * - [https://learn.microsoft.com/en-us/dotnet/core/tools/global-json](https://learn.microsoft.com/en-us/dotnet/core/tools/global-json)
 * - [https://github.com/snyk/snyk-nuget-plugin/blob/885486aa656c28d3db465c8d22710770d5cc6773/lib/nuget-parser/cli/dotnet.ts#L67](https://github.com/snyk/snyk-nuget-plugin/blob/885486aa656c28d3db465c8d22710770d5cc6773/lib/nuget-parser/cli/dotnet.ts#L67)
 * @summary The dotnet CLI is unable to generate a self-contained binary
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class PublishFailedError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name PrivateModuleError
 * @description Snyk could not access the private modules within your go.mod files.
 *
 * See more:
 * - [https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/go](https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/go)
 * @summary Failed to access private module
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class PrivateModuleError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name GoModFileMissingError
 * @description A go.mod file was not found in the current directory or any parent directory.
 *
 * See more:
 * - [https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/go](https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/go)
 * @summary Go mod file not found
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class GoModFileMissingError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name SsoReAuthRequiredError
 * @description Your code is cloned on an isolated environment using Git as it is required by Snyk to analyze its dependencies.
 *
 * Your Organization has enabled or enforced SAML SSO after you authorized Snyk to access your code, and a re-authentication is therefore required.
 *
 * The error you're seeing is usually reproducible by attempting to do a `git clone` of your repository with incorrectly configured credentials.
 * Verify your authentication configuration with your Git cloud provider and try again.
 *
 * See more:
 * - [https://docs.github.com/en/enterprise-cloud@latest/authentication/authenticating-with-saml-single-sign-on/about-authentication-with-saml-single-sign-on#about-oauth-apps-github-apps-and-saml-sso](https://docs.github.com/en/enterprise-cloud@latest/authentication/authenticating-with-saml-single-sign-on/about-authentication-with-saml-single-sign-on#about-oauth-apps-github-apps-and-saml-sso)
 * @summary OAuth re-authorization required
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class SsoReAuthRequiredError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name IncompleteProjectError
 * @description Generating the dependency graph requires Snyk to run go list `go list -deps -json` inside the project. If the operation fails, creating a full dependency graph cannot continue.
 *
 * This error means that you need some cleanup, such as `go mod tidy`) or your project deployment process contains a code generation step such as `protobuf` or similar that is not currently supported by Snyk.
 *
 * To verify if this is the case, clone your project in a clean environment, run go list `go list -deps -json` and verify whether the operation fails.
 *
 * If Snyk cannot process your code successfully, insert the Snyk CLI as part of your deployment pipeline.
 *
 * See more:
 * - [https://docs.snyk.io/snyk-cli](https://docs.snyk.io/snyk-cli)
 * - [https://github.com/snyk/snyk-go-plugin](https://github.com/snyk/snyk-go-plugin)
 * - [https://github.com/golang/go/blob/master/src/cmd/go/internal/list/list.go](https://github.com/golang/go/blob/master/src/cmd/go/internal/list/list.go)
 * @summary Your project repository is missing required files
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class IncompleteProjectError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name InconsistentVendoringError
 * @description Generating the dependency graph requires Snyk to run `go list -deps -json` inside the project. If the operation fails, creating a full dependency graph cannot continue.
 *
 * This error means that there is inconsistency between your `vendor/modules.txt` file and your `go.mod` file. To remediate, you need to:
 *
 * * `go mod vendor`
 * * `go mod tidy`
 *
 * Next, commit those changes to your repo. Snyk does not manipulate with your code on our end by design, which is why this is not done automatically.
 *
 * To verify if this is the case, clone your project in a clean environment, run go list `go list -deps -json` and verify whether the operation fails.
 * Then try and run the above mentioned commands and see if your SCM system reports changes in files.
 *
 * See more:
 * - [https://go.dev/ref/mod#go-mod-vendor](https://go.dev/ref/mod#go-mod-vendor)
 * @summary Your project repository has inconsistent vendoring information
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class InconsistentVendoringError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnsupportedExternalFileGenerationSCMError
 * @description Snyk currently does not support external file generation in your project. This limitation is due to Snyk's lack of visibility into the third-party generator tools you may be using and the specific commands required to generate these files.
 *
 * Snyk can only work with the files available in your repository and does not have insight into the generation process for external files.
 * @summary Unsupported external file generation
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnsupportedExternalFileGenerationSCMError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name MissingRequirementFromPomError
 * @description The required property is missing from the pom object.
 * @summary Missing property
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class MissingRequirementFromPomError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnableToResolveValueForPropertyError
 * @description The targeted property could not be resolved with a valid value.
 * @summary Unable to resolve value for property
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnableToResolveValueForPropertyError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnableToResolveVersionForPropertyError
 * @description The targeted property could not be resolved with a valid version.
 * @summary Unable to resolve version for property
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnableToResolveVersionForPropertyError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name CyclicPropertyDetectedInPomFileError
 * @description There is circular dependency among properties in the Maven project's configuration file (POM), preventing proper resolution and causing an error.
 * @summary Cyclic property detected in POM file
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class CyclicPropertyDetectedInPomFileError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnableToParseXMLError
 * @description There is an error parsing the XML file. This could be referring to either pom.xml or maven-metadata.xml.
 * @summary Error parsing the XML file
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnableToParseXMLError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name InvalidCoordinatesError
 * @description The coordinates provided for a project were invalid.
 * @summary Invalid coordinates provided
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class InvalidCoordinatesError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name SkippedGroupError
 * @description Skipping a specific groupId starting due to remapped coordinates.
 * @summary Skipping group
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class SkippedGroupError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name PomFileNotFoundError
 * @description The pom file was not found in Maven repository.
 * @summary Pom file not found
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class PomFileNotFoundError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name MissingProjectFromPomError
 * @description A project element is missing from POM.
 * @summary Missing project from POM
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class MissingProjectFromPomError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name CannotResolveTargetPomFromXmlError
 * @description Cannot resolve the targeted POM from the input XML.
 * @summary Cannot resolve the target POM from the input XML
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class CannotResolveTargetPomFromXmlError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name CannotResolveTargetPomFromRepoError
 * @description Cannot resolve the targeted POM from the repository.
 * @summary Cannot resolve the target POM from the repository
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class CannotResolveTargetPomFromRepoError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name CannotGetBuildFileFromRepoError
 * @description Cannot get the build file repository.
 * @summary Cannot get the build file repository
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class CannotGetBuildFileFromRepoError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name CannotCreateGitHostError
 * @description Cannot create source URL.
 * @summary Unable to create hosted git info
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class CannotCreateGitHostError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name NoReleasedVersionForVersionsRangeError
 * @description There was no version released for the specified versions range.
 * @summary No released version for versions range
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class NoReleasedVersionForVersionsRangeError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name SourceNotSupportedError
 * @description The source used is not supported by fetcher. The supported sources are: github, bitbucket, gitlab.
 * @summary Source is not supported
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class SourceNotSupportedError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name TimeoutWhenProcessingTheDepTreeError
 * @description There was an timeout when processing the dependecy tree.
 * @summary Timeout when processing the dependency tree
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class TimeoutWhenProcessingTheDepTreeError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name NoRepoFoundForTheNPMPackageError
 * @description No repository found for the NPM package.
 * @summary No repository found for A NPM package
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class NoRepoFoundForTheNPMPackageError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name CouldNotParseNPMRegistryURLError
 * @description Could not parse NPM registry URL.
 * @summary Could not parse NPM registry URL
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class CouldNotParseNPMRegistryURLError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name CouldNotFindBrokerURLError
 * @description Could not find a broker resolved URL.
 * @summary Could not find a broker resolved URL
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class CouldNotFindBrokerURLError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnableToReplaceBrokerURLError
 * @description Unable to replace all broker urls in lock file.
 * @summary Unable to replace broker URL
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnableToReplaceBrokerURLError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name BadNPMVersionError
 * @description The NPM version is not supported.
 * @summary Bad NPM version
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class BadNPMVersionError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnknownBlobEncodingOnGithubError
 * @description Unknown blob encoding on Github.
 * @summary Unknown blob encoding on Github
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnknownBlobEncodingOnGithubError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name NoResultsFromForkerProcessesError
 * @description No result from forked process.
 * @summary No result from forked process
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class NoResultsFromForkerProcessesError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name ChildProcessExecutionError
 * @description The child process encountered an error during execution.
 * @summary Child Process Execution Error
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class ChildProcessExecutionError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name NoValidPackageUpgradesError
 * @description The system attempted to find valid upgrades for the packages specified in the lock file, but none were available.
 * @summary No valid package upgrades
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class NoValidPackageUpgradesError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name NoDependencyUpdatesError
 * @description There are no available updates for the dependencies.
 * @summary No dependency updates
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class NoDependencyUpdatesError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name CouldNotParseJSONFileError
 * @description An error occurred while attempting to parse a JSON file.
 * @summary Could not parse JSON file
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class CouldNotParseJSONFileError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name Base64EncodeError
 * @description An error occurred while attempting to perform Base64 encoding.
 * @summary Could not Base64 encode
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class Base64EncodeError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name Base64DecodeError
 * @description An error occurred while attempting to perform Base64 decoding.
 * @summary Could not Base64 decode
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class Base64DecodeError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name MissingSupportedFileError
 * @description Could not find supported file.
 * @summary Missing supported file
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class MissingSupportedFileError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name InvalidConfigurationError
 * @description The configuration parameter does not meet the expected data type. Please ensure the provided value is of the correct data type.
 * @summary Invalid configuration
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class InvalidConfigurationError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnsupportedRequirementsFileError
 * @description The provided requirements file is not supported by Snyk for Python.
 *
 * See more:
 * - [https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/python](https://docs.snyk.io/scan-applications/supported-languages-and-frameworks/python)
 * @summary Unsupported manifest file type for remediation
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnsupportedRequirementsFileError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name TooManyManifestFilesError
 * @description Too many manifest files were provided in the request body.
 * @summary Received more manifests than expected
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class TooManyManifestFilesError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name FailedToApplyDependencyUpdatesError
 * @description An error occured while updating dependencies.
 * @summary Failed to apply dependency updates
 * @category OpenSourceEcosystems
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class FailedToApplyDependencyUpdatesError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
