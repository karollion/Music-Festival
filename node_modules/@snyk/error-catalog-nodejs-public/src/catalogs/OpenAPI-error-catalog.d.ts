/*
 * Â© 2023 Snyk Limited
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ProblemError } from '../problem-error';
/**
 * @class
 * @name BadRequestError
 * @description The server cannot process the request due to invalid or corrupt data. Review the request, then try again.
 *
 * See more:
 * - [https://docs.snyk.io/snyk-api-info/getting-started-using-snyk-rest-api ](https://docs.snyk.io/snyk-api-info/getting-started-using-snyk-rest-api )
 * @summary Bad request
 * @category OpenAPI
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class BadRequestError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name ForbiddenError
 * @description Access to the requested resource is forbidden.
 * @summary Forbidden
 * @category OpenAPI
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class ForbiddenError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name NotAcceptableError
 * @description The server cannot provide a response that matches the provided accept headers. Review the request, then try again.
 * @summary Not acceptable
 * @category OpenAPI
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class NotAcceptableError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name NotFoundError
 * @description The server cannot find the requested resource.
 * @summary Not found
 * @category OpenAPI
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class NotFoundError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name MethodNotAllowedError
 * @description The target endpoint does not support your request method. Review the request, then try again.
 * @summary Method not allowed
 * @category OpenAPI
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class MethodNotAllowedError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name RequestEntityTooLargeError
 * @description The request entity exceeds server limitations.
 * @summary Request entity too large
 * @category OpenAPI
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class RequestEntityTooLargeError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnauthorizedError
 * @description The request lacks authentication credentials for the requested resource.
 *
 * See more:
 * - [https://docs.snyk.io/snyk-api-info/authentication-for-api ](https://docs.snyk.io/snyk-api-info/authentication-for-api )
 * @summary Unauthorized
 * @category OpenAPI
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnauthorizedError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnsupportedMediaTypeError
 * @description The media format of the request is not supported.
 * @summary Unsupported media type
 * @category OpenAPI
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnsupportedMediaTypeError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
