/*
 * Â© 2023 Snyk Limited
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ProblemError } from '../problem-error';
/**
 * @class
 * @name InternalServerError
 * @description An unexpected error occurred during the SBOM generation. Review the request, then try again. If the error persists, contact Snyk Support.
 * @summary SBOM generation export server error
 * @category SbomExport
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class InternalServerError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnexpectedDepGraphResponseError
 * @description An unexpected dependency graph error occurred. Review the request, then try again. If the error persists, contact Snyk Support.
 * @summary Dependency graph error
 * @category SbomExport
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnexpectedDepGraphResponseError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnexpectedParseDepGraphError
 * @description The dependency graph cannot be parsed due to an unexpected error. Review the request, then try again. If the error persists, contact Snyk Support.
 * @summary Error parsing dependency graph
 * @category SbomExport
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnexpectedParseDepGraphError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name IaCOrSASTProjectError
 * @description Only SBOMs for Snyk Open Source or Snyk Container projects are supported.
 * @summary SBOM not supported due to project type
 * @category SbomExport
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class IaCOrSASTProjectError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name UnsupportedProjectError
 * @description Only SBOMs for open source projects are supported (Snyk Open Source).
 * @summary SBOM not supported
 * @category SbomExport
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class UnsupportedProjectError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name DepGraphResponseError
 * @description The server cannot process the request due to incomplete data. Review the request, then try again.
 * @summary Dependency graph request cannot be processed
 * @category SbomExport
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class DepGraphResponseError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name MissingAuthTokenError
 * @description The API token is misconfigured or expired. Configure or generate the API token, then try again.
 *
 * See more:
 * - [https://docs.snyk.io/snyk-api-info/revoking-and-regenerating-snyk-api-tokens](https://docs.snyk.io/snyk-api-info/revoking-and-regenerating-snyk-api-tokens)
 * @summary Authorization failed due to missing API token
 * @category SbomExport
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class MissingAuthTokenError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name EmptyRequestBodyError
 * @description The body of the request is empty. Review the request, then try again.
 * @summary Client request cannot be processed
 * @category SbomExport
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class EmptyRequestBodyError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
/**
 * @class
 * @name InvalidDepGraphError
 * @description The request cannot be processed due to an internal error. Review the request, then try again.
 * @summary Invalid dependency graph
 * @category SbomExport
 * @param {string} details                         the specific details that causes this error
 * @param {Record<string, any>} [additionalData]   a collection of relevant data specific to this error
 * @param {Error} [cause]                          the `Error` type that caused this error to be thrown
 * @param {string} [instance]                      the instance to use for this error. Overrides 'instance' metadata
 */
export declare class InvalidDepGraphError extends ProblemError {
    constructor(details: string, additionalData?: Record<string, any>, cause?: Error, instance?: string);
}
