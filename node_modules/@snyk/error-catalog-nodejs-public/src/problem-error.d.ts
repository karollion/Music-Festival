/*
 * Â© 2023 Snyk Limited
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ErrorFormats, ErrorMetadata, JsonApi, JsonApiErrorObject, ProblemJson } from './types';
export declare class ProblemError extends Error {
    readonly metadata: ErrorMetadata;
    readonly detail: string;
    readonly additionalData?: Record<string, any> | undefined;
    readonly cause?: Error | undefined;
    private id;
    readonly isErrorCatalogError = true;
    constructor(metadata: ErrorMetadata, detail: string, additionalData?: Record<string, any> | undefined, cause?: Error | undefined);
    format(instance: string, formatType: ErrorFormats): ProblemJson | JsonApi;
    toProblemJson(instance: string): ProblemJson;
    /**
     * Convert this ProblemError to a JsonApiErrorObject.
     * If the error was created with 'instance' metadata then that will be used by default.
     * @param instance string the instance to use for this error. Overrides 'instance' metadata
     * @returns JsonApiErrorObject a JsonApiErrorObject representing this ProblemError
     */
    toJsonApiErrorObject(instance?: string): JsonApiErrorObject;
    toJsonApi(instance?: string): JsonApi;
}
